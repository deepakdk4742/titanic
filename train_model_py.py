# -*- coding: utf-8 -*-
"""train_model.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q7UVxhT72j-j6TI7Epxj-igi3-Q9GtQN
"""

pip install pandas scikit-learn streamlit joblib

# Import required libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score
import joblib  # For saving the model

# Load the dataset
df = pd.read_csv("/content/titanic5.csv")

# Data Preprocessing
def preprocess_data(df):
    # Keep only necessary columns
    df = df[['Survived', 'Pclass', 'Sex', 'Age']]

    # Handle missing values
    df['Age'].fillna(df['Age'].median(), inplace=True)

    # Encode categorical variables
    le = LabelEncoder()
    df['Sex'] = le.fit_transform(df['Sex'])  # Male = 1, Female = 0

    return df

# Preprocess the data
data = preprocess_data(df)

# Split into features and target
X = data[['Pclass', 'Sex', 'Age']]
y = data['Survived']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Test the model
y_pred = model.predict(X_test)
print(f"Accuracy: {accuracy_score(y_test, y_pred)}")

# Save the model
joblib.dump(model, "titanic_model.pkl")

# Import required libraries
!pip install streamlit
import streamlit as st
import joblib
import numpy as np

# Load the model
model = joblib.load("titanic_model.pkl")

# Title
st.title("Titanic Survival Prediction")

# User inputs
st.sidebar.header("Passenger Details")
pclass = st.sidebar.selectbox("Passenger Class (1 = First, 2 = Second, 3 = Third)", [1, 2, 3])
sex = st.sidebar.selectbox("Gender", ["Male", "Female"])
age = st.sidebar.slider("Age", 0, 100, 25)

# Preprocess inputs
sex_encoded = 1 if sex == "Male" else 0
features = np.array([[pclass, sex_encoded, age]])

# Prediction
if st.sidebar.button("Predict"):
    prediction = model.predict(features)
    survival = "Survived" if prediction[0] == 1 else "Did not survive"
    st.write(f"### Prediction: {survival}")